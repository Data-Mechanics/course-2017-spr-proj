# optimizeBusRoute.py

import urllib.request
import json
import dml
import prov.model
import datetime
import uuid
import math
import random
import geojson
#import xlsxwriter

class finalizBusRoute(dml.Algorithm):
    contributor = 'echogu_wei0496_wuhaoyu'
    reads = ['echogu_wei0496_wuhaoyu.bus_route']
    writes = ['echogu_wei0496_wuhaoyu.bus_route_final']

    @staticmethod
    def execute(trial = False):
        ''' finalize bus routes and convert to geojson format
        '''
        startTime = datetime.datetime.now()

        # Set up the database connection.
        client = dml.pymongo.MongoClient()
        repo = client.repo
        repo.authenticate('echogu_wei0496_wuhaoyu', 'echogu_wei0496_wuhaoyu')

        # loads the collection
        raw_bus_route = repo['echogu_wei0496_wuhaoyu.bus_route'].find()
        bus_route = list(raw_bus_route)

        # convert to geojson
        features = []
        for r in bus_route:
            properties = {'school': r['school'],
                          'school location': r['school location'],
                          'bus yard': r['bus yard'],
                          'yard location': r['yard location'],
                          'yard address': r['yard address']}

            sequence = r['pickup_sequence']
            route = []

            # from bus yard to first student
            yard = tuple(r['yard location'])
            start = (sequence[0]['latitude'], sequence[0]['longitude'])
            route += [yard, start]

            # from the first student to the last student
            if len(sequence) > 1:
                for i in range(len(sequence) - 1):
                    s1 = (sequence[i]['latitude'], sequence[i]['longitude'])
                    s2 = ([sequence[i + 1]['latitude'], sequence[i + 1]['longitude']])
                    route += [s1, s2]

                # from the last student to school
                end = (sequence[-1]['latitude'], sequence[-1]['longitude'])
                school = tuple(r['school location'])
                route += [end, school]

            else:
                student = (sequence[0]['latitude'], sequence[0]['longitude'])
                school = tuple(r['school location'])
                route += [student, school]

            geometry = geojson.MultiLineString(route)
            features.append(geojson.Feature(geometry=geometry, properties=properties))

        # store bus route into database in geojson format
        repo.dropCollection('bus_route_final')
        repo.createCollection('bus_route_final')
        repo['echogu_wei0496_wuhaoyu.bus_route_final'].insert_many(features)
        repo['echogu_wei0496_wuhaoyu.bus_route_final'].metadata({'complete': True})
        print(repo['echogu_wei0496_wuhaoyu.bus_route_final'].metadata(), "Saved Bus Route")

        endTime = datetime.datetime.now()

        return {"start": startTime, "end": endTime}

    @staticmethod
    def provenance(doc=prov.model.ProvDocument(), startTime=None, endTime=None):
        ''' Create the provenance document describing everything happening
            in this script. Each run of the script will generate a new
            document describing that invocation event.
        '''

        # Set up the database connection.
        client = dml.pymongo.MongoClient()
        repo = client.repo
        repo.authenticate('echogu_wei0496_wuhaoyu', 'echogu_wei0496_wuhaoyu')

        # create document object and define namespaces
        doc.add_namespace('alg', 'http://datamechanics.io/algorithm/')  # The scripts are in <folder>#<filename> format.
        doc.add_namespace('dat', 'http://datamechanics.io/data/')  # The data sets are in <user>#<collection> format.
        doc.add_namespace('ont', 'http://datamechanics.io/ontology#')  # 'Extension', 'DataResource', 'DataSet', 'Retrieval', 'Query', or 'Computation'.
        doc.add_namespace('log', 'http://datamechanics.io/log/')  # The event log.

        # define entity to represent resources
        this_script = doc.agent('alg:echogu_wei0496_wuhaoyu#finalizeBusRoute', {prov.model.PROV_TYPE: prov.model.PROV['SoftwareAgent'], 'ont:Extension': 'py'})
        resource_bus_route = doc.entity('dat:echogu_wei0496_wuhaoyu#bus_route', {'prov:label': 'bus_route', prov.model.PROV_TYPE: 'ont:DataSet'})

        # define activity to represent invocaton of the script
        run_finalizeBusRoute = doc.activity('log:uuid' + str(uuid.uuid4()), startTime, endTime)
        # associate the activity with the script
        doc.wasAssociatedWith(run_finalizeBusRoute, this_script)
        # indicate that an activity used the entity
        doc.usage(run_finalizeBusRoute, resource_bus_route, startTime, None, {prov.model.PROV_TYPE: 'ont:Computation'})

        # for the data obtained, indicate that the entity was attributed to what agent, was generated by which activity and was derived from what entity
        bus_route_final = doc.entity('dat:echogu_wei0496_wuhaoyu#bus_route_final', {prov.model.PROV_LABEL: 'bus_route_final', prov.model.PROV_TYPE: 'ont:DataSet'})
        doc.wasAttributedTo(bus_route_final, this_script)
        doc.wasGeneratedBy(bus_route_final, run_finalizeBusRoute, endTime)
        doc.wasDerivedFrom(bus_route_final, resource_bus_route, run_finalizeBusRoute, run_finalizeBusRoute, run_finalizeBusRoute)

        repo.logout()

        return doc

finalizBusRoute.execute()
# doc = finalizeBusRoute.provenance()
# print(doc.get_provn())
# print(json.dumps(json.loads(doc.serialize()), indent=4))

## eof
