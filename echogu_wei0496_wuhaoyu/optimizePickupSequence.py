# import urllib.request
# import json
import dml
import prov.model
import datetime
import uuid
import random
from geopy.distance import vincenty
from tsp_solver.greedy import solve_tsp

class optimizePickupSequence(dml.Algorithm):
    contributor = 'echogu_wei0496_wuhaoyu'
    reads = ['echogu_wei0496_wuhaoyu.assigned_students']
    writes = ['echogu_wei0496_wuhaoyu.pickup_sequence']

    @staticmethod
    def execute(trial = False):
        ''' optimize school bus route
        '''
        startTime = datetime.datetime.now()

        # Set up the database connection.
        client = dml.pymongo.MongoClient()
        repo = client.repo
        repo.authenticate('echogu_wei0496_wuhaoyu', 'echogu_wei0496_wuhaoyu')

        # loads the collection
        raw_assigned_students = repo['echogu_wei0496_wuhaoyu.assigned_students'].find()
        assigned_students = []
        for item in raw_assigned_students:
            assigned_students.append({'mean': item['mean'], 'points': item['students'], 'school': item['school'], 'location': item['location']})

        # Trial mode
        if trial:
            if len(assigned_students) == 1:
                pass
            else:
                assigned_students = random.choices(assigned_students, k = 1)

        # utilize TSP solver to find bus route
        result = optimizePickupSequence.tsp_solver(assigned_students)

        # store the pickup sequence in database
        repo.dropCollection('pickup_sequence')
        repo.createCollection('pickup_sequence')
        repo['echogu_wei0496_wuhaoyu.pickup_sequence'].insert_many(result)
        repo['echogu_wei0496_wuhaoyu.pickup_sequence'].metadata({'complete': True})
        print(repo['echogu_wei0496_wuhaoyu.pickup_sequence'].metadata(), "Saved Pickup Sequence")

        endTime = datetime.datetime.now()

        return {"start": startTime, "end": endTime}

    @staticmethod
    def provenance(doc=prov.model.ProvDocument(), startTime=None, endTime=None):
        ''' Create the provenance document describing everything happening
            in this script. Each run of the script will generate a new
            document describing that invocation event.
        '''

        # Set up the database connection.
        client = dml.pymongo.MongoClient()
        repo = client.repo
        repo.authenticate('echogu_wei0496_wuhaoyu', 'echogu_wei0496_wuhaoyu')

        # create document object and define namespaces
        doc.add_namespace('alg', 'http://datamechanics.io/algorithm/')  # The scripts are in <folder>#<filename> format.
        doc.add_namespace('dat', 'http://datamechanics.io/data/')  # The data sets are in <user>#<collection> format.
        doc.add_namespace('ont', 'http://datamechanics.io/ontology#')  # 'Extension', 'DataResource', 'DataSet', 'Retrieval', 'Query', or 'Computation'.
        doc.add_namespace('log', 'http://datamechanics.io/log/')  # The event log.

        # define entity to represent resources
        this_script = doc.agent('alg:echogu_wei0496_wuhaoyu#optimizePickupSequence', {prov.model.PROV_TYPE: prov.model.PROV['SoftwareAgent'], 'ont:Extension': 'py'})
        resource_assigned_students = doc.entity('dat:echogu_wei0496_wuhaoyu#assigned_students', {'prov:label': 'assigned_students', prov.model.PROV_TYPE: 'ont:DataSet'})

        # define activity to represent invocaton of the script
        run_optimizePickupSequence = doc.activity('log:uuid' + str(uuid.uuid4()), startTime, endTime)
        # associate the activity with the script
        doc.wasAssociatedWith(run_optimizePickupSequence, this_script)
        # indicate that an activity used the entity
        doc.usage(run_optimizePickupSequence, resource_assigned_students, startTime, None, {prov.model.PROV_TYPE: 'ont:Computation'})

        # for the data obtained, indicate that the entity was attributed to what agent, was generated by which activity and was derived from what entity
        pickup_sequence = doc.entity('dat:echogu_wei0496_wuhaoyu#pickup_sequence', {prov.model.PROV_LABEL: 'pickup_sequence', prov.model.PROV_TYPE: 'ont:DataSet'})
        doc.wasAttributedTo(pickup_sequence, this_script)
        doc.wasGeneratedBy(pickup_sequence, run_optimizePickupSequence, endTime)
        doc.wasDerivedFrom(pickup_sequence, resource_assigned_students, run_optimizePickupSequence, run_optimizePickupSequence, run_optimizePickupSequence)

        repo.logout()

        return doc

    # Traveling Salesman Problem greedy solver
    @staticmethod
    def tsp_solver(assigned_students):
        route = []
        for s in assigned_students:
            points = s['points']
            final = []
            results = []
            for p in points:
                results.append([p["latitude"], p["longitude"], p['student_id']])

            adjacency_matrix = optimizePickupSequence.generate_graph(results)
            sequence = solve_tsp(adjacency_matrix)
            tsp_dis = optimizePickupSequence.cal_totaldis(results, sequence)
            # When there is only one student, not need to find route
            if(len(sequence) == 1):
                final.append({'student_id': results[0][2],
                              'latitude': results[0][0],
                              'longitude': results[0][1]})
            else:
                for k in sequence:
                    final.append({'student_id': results[k][2],
                                  'latitude': results[k][0],
                                  'longitude': results[k][1]})

            route.append({'mean': s['mean'],
                          'school': s['school'],
                          'location': s['location'],
                          'pickup_sequence': final})
        return route

    @staticmethod
    def generate_graph(points):
        # initialize the adjacency matrix
        adjacency_matrix = [[100 for x in range(len(points))] for y in range(len(points))]
        for i in range(len(points)-1):
            for j in range(i+1, len(points)):
                adjacency_matrix[i][j] = optimizePickupSequence.distance(points[i][0:2], points[j][0:2])
                adjacency_matrix[j][i] = adjacency_matrix[i][j]
        return adjacency_matrix

    @staticmethod
    def cal_totaldis(points, sequence):
        if(isinstance(sequence[0], int) == False):
            res = 0
            prv = sequence[0][1]
            for i in range(1, len(sequence)):
                res += optimizePickupSequence.distance(points[prv][0:2], points[sequence[i][1]][0:2])
                prv = sequence[i][1]
        else:
            res = 0
            prv = sequence[0]
            for i in range(1, len(sequence)):
                res += optimizePickupSequence.distance(points[prv][0:2], points[sequence[i]][0:2])
                prv = sequence[i]
        return res

    @staticmethod
    def distance(point1, point2):
        return vincenty(point1, point2).miles

# optimizePickupSequence.execute()
# doc = optimizePickupSequence.provenance()
# print(doc.get_provn())
# print(json.dumps(json.loads(doc.serialize()), indent=4))